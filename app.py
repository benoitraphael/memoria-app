import streamlit as st
import os
import json
import time
import uuid
import datetime
import re
import openai
from pathlib import Path
import numpy as np
import tempfile
import io
import sys
import gc  # Garbage Collector pour lib√©rer de la m√©moire

# --- Logs de D√©marrage Tr√®s Sp√©cifiques ---
print("--- Script app.py d√©marr√© ---")
print(f"R√©pertoire de travail : {os.getcwd()}")
print(f"Version Python : {sys.version}")
# Essayer d'importer et afficher la version de streamlit
try:
    print(f"Version Streamlit : {st.__version__}")
except AttributeError:
    print("Impossible de r√©cup√©rer la version de Streamlit (__version__ non trouv√©)")

try:
    # --- Configuration de la page --- 
    # DOIT √äTRE LA PREMI√àRE COMMANDE STREAMLIT
    print("--- AVANT st.set_page_config ---")
    st.set_page_config(
        page_title="MemorIA - Votre atelier d'√©criture personnel",
        page_icon="üìù",
        layout="wide"
    )
    print("--- APR√àS st.set_page_config ---")

    # --- Initialisation des variables de session ---
    print("--- AVANT initialisation st.session_state ---")
    if "selected_template_name" not in st.session_state:
        st.session_state.selected_template_name = None
        print("Initialis√©: selected_template_name")
    if "chapters" not in st.session_state:
        st.session_state.chapters = []
        print("Initialis√©: chapters")
    if "api_key" not in st.session_state:
        st.session_state.api_key = ""
        print("Initialis√©: api_key")
    if "generated_chapters" not in st.session_state:
        st.session_state.generated_chapters = {}
        print("Initialis√©: generated_chapters")
    if "user_message" not in st.session_state:
        st.session_state.user_message = None
        print("Initialis√©: user_message")
    if 'active_expander' not in st.session_state:
        st.session_state.active_expander = None
        print("Initialis√©: active_expander")
    if 'chapter_messages' not in st.session_state:
        st.session_state.chapter_messages = {}
        print("Initialis√©: chapter_messages")
    print("--- APR√àS initialisation st.session_state ---")

    # Appel gc.collect() ici, apr√®s les premi√®res op√©rations Streamlit
    print("--- Appel gc.collect() --- ")
    gc.collect()

    # --- Affichage du message utilisateur global (si existant) ---
    print("--- AVANT affichage message utilisateur ---")
    if st.session_state.user_message:
        msg_type = st.session_state.user_message["type"]
        msg_text = st.session_state.user_message["text"]
        if msg_type == "success":
            st.success(msg_text)
        elif msg_type == "error":
            st.error(msg_text)
        elif msg_type == "warning":
            st.warning(msg_text)
        elif msg_type == "info":
            st.info(msg_text)
        # Effacer le message pour qu'il ne s'affiche qu'une fois
        st.session_state.user_message = None
    print("--- APR√àS affichage message utilisateur ---")
    print("--- Fin du bloc d'initialisation principal ---")

except Exception as e:
    print(f"!!! ERREUR CRITIQUE PENDANT L'INITIALISATION : {str(e)} !!!")
    # Essayer d'afficher l'erreur dans Streamlit si possible
    try:
        st.error(f"Une erreur critique s'est produite lors du d√©marrage : {str(e)}")
    except Exception as inner_e:
        print(f"!!! Impossible d'afficher l'erreur dans Streamlit : {inner_e} !!!")

# --- La suite du code (fonctions, interface principale...) ---
print("--- D√©but de la d√©finition des fonctions --- ")

# --- Fonctions Utilitaires ---
def normalize_name(name):
    """Normaliser les noms de fichiers/dossiers pour √©viter les caract√®res invalides"""
    return re.sub(r'[^a-z0-9]', '_', name.lower())

def update_text_content(widget_session_key, content_session_key):
    """Met √† jour la variable de session contenant le texte lorsque l'utilisateur tape."""
    st.session_state[content_session_key] = st.session_state[widget_session_key]

def load_templates():
    """Charger les templates de livre disponibles"""
    template_dir = os.path.join(os.getcwd(), "templates")
    templates = {}
    
    if not os.path.exists(template_dir):
        os.makedirs(template_dir)
        # Cr√©er un template par d√©faut si aucun n'existe
        default_template = {
            "titre": "Mon Autobiographie",
            "chapitres": ["Enfance", "Adolescence", "√Çge adulte", "R√©flexions"]
        }
        with open(os.path.join(template_dir, "default.json"), 'w', encoding='utf-8') as f:
            json.dump(default_template, f, ensure_ascii=False, indent=2)
    
    for filename in os.listdir(template_dir):
        if filename.endswith('.json'):
            file_path = os.path.join(template_dir, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    template = json.load(f)
                    # Accepter soit "titre" (fran√ßais) soit "title" (anglais)
                    template_name = template.get('titre', template.get('title', os.path.splitext(filename)[0]))
                    templates[template_name] = template
            except Exception as e:
                st.error(f"Erreur lors du chargement du template {filename}: {str(e)}")
    
    return templates

def load_memories(chapter):
    """Charger les souvenirs enregistr√©s pour un chapitre sp√©cifique"""
    memories = []
    
    # Cr√©er le chemin du dossier pour ce chapitre
    template_name = st.session_state.get('selected_template_name')
    if not template_name:
        return memories
        
    chapter_dir = os.path.join(os.getcwd(), "souvenirs", normalize_name(template_name), normalize_name(chapter))
    
    if not os.path.exists(chapter_dir):
        return memories
    
    # Charger tous les fichiers .md dans le dossier
    for filename in os.listdir(chapter_dir):
        if filename.endswith('.md'):
            file_path = os.path.join(chapter_dir, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                memories.append({
                    'filename': filename,
                    'content': content,
                    'path': file_path
                })
            except Exception as e:
                st.error(f"Erreur lors du chargement du souvenir {filename}: {str(e)}")
    
    # Lib√©rer la m√©moire apr√®s le chargement (ajout pour optimisation)
    gc.collect()
    
    return memories

def save_memory(template_name, chapter, content):
    """Sauvegarder un souvenir pour un chapitre sp√©cifique avec un nom de fichier unique."""
    if not content or not content.strip():
        return False, "Le contenu du souvenir est vide.", None
        
    try:
        # Cr√©er les dossiers n√©cessaires s'ils n'existent pas
        base_dir = Path("souvenirs")
        template_dir = base_dir / normalize_name(template_name)
        chapter_dir = template_dir / normalize_name(chapter)
        chapter_dir.mkdir(parents=True, exist_ok=True)
        
        # G√©n√©rer un nom de fichier unique
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        unique_id = str(uuid.uuid4())[:8] # Court UUID pour unicit√©
        filename = f"{timestamp}_{unique_id}.md"
        file_path = chapter_dir / filename
        
        # √âcrire le contenu dans le fichier
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
            
        return True, f"Souvenir sauvegard√© avec succ√®s sous `{filename}`", str(file_path)
        
    except Exception as e:
        error_msg = f"Erreur lors de la sauvegarde du souvenir : {str(e)}"
        st.error(error_msg)
        return False, error_msg, None

def load_chapter(template_name, chapter):
    """Charger un chapitre g√©n√©r√© s'il existe"""
    chapter_file = os.path.join(os.getcwd(), "chapitres", normalize_name(template_name), f"{normalize_name(chapter)}.md")
    
    if not os.path.exists(chapter_file):
        return None
        
    try:
        with open(chapter_file, 'r', encoding='utf-8') as f:
            content = f.read()
        return content
    except Exception as e:
        st.error(f"Erreur lors du chargement du chapitre: {str(e)}")
        return None

def save_chapter(template_name, chapter_name, content):
    """Sauvegarder un chapitre g√©n√©r√©"""
    # Cr√©er les dossiers n√©cessaires
    base_dir = os.path.join(os.getcwd(), "chapitres")
    template_dir = os.path.join(base_dir, normalize_name(template_name))
    
    os.makedirs(template_dir, exist_ok=True)
    
    file_path = os.path.join(template_dir, f"{normalize_name(chapter_name)}.md")
    
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        return True, f"Chapitre '{chapter_name}' sauvegard√© avec succ√®s", file_path
    except Exception as e:
        error_msg = f"Erreur lors de l'enregistrement du chapitre: {str(e)}"
        return False, error_msg, None

def load_generated_chapters():
    """Charger tous les chapitres g√©n√©r√©s pour le template actuel"""
    if 'selected_template_name' not in st.session_state:
        return {}
        
    template_name = st.session_state.selected_template_name
    chapters_dir = os.path.join(os.getcwd(), "chapitres", normalize_name(template_name))
    
    if not os.path.exists(chapters_dir):
        return {}
        
    chapters = {}
    for filename in os.listdir(chapters_dir):
        if filename.endswith('.md'):
            chapter_name = os.path.splitext(filename)[0]
            file_path = os.path.join(chapters_dir, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                chapters[chapter_name] = content
            except Exception as e:
                st.error(f"Erreur lors du chargement du chapitre {filename}: {str(e)}")
    
    return chapters

def compile_book(template_name, ordered_chapters):
    """Compiler tous les chapitres en un seul document"""
    if not ordered_chapters:
        return None
        
    book_content = []
    
    # Ajouter le titre
    book_content.append(f"# {template_name}\n\n")
    
    # Ajouter chaque chapitre
    for chapter_name in ordered_chapters:
        norm_chapter = normalize_name(chapter_name)
        chapter_file = os.path.join(os.getcwd(), "chapitres", normalize_name(template_name), f"{norm_chapter}.md")
        
        if os.path.exists(chapter_file):
            try:
                with open(chapter_file, 'r', encoding='utf-8') as f:
                    chapter_content = f.read()
                
                # Ajouter le titre du chapitre si n√©cessaire
                if not chapter_content.strip().startswith('#'):
                    book_content.append(f"## {chapter_name}\n\n")
                
                book_content.append(f"{chapter_content}\n\n")
            except Exception as e:
                st.error(f"Erreur lors de la compilation du chapitre {chapter_name}: {str(e)}")
    
    # Cr√©er le livre complet
    full_book = "\n".join(book_content)
    
    # Sauvegarder dans le dossier des livres
    books_dir = os.path.join(os.getcwd(), "livres")
    os.makedirs(books_dir, exist_ok=True)
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    book_filename = f"{normalize_name(template_name)}_{timestamp}.md"
    book_path = os.path.join(books_dir, book_filename)
    
    try:
        with open(book_path, 'w', encoding='utf-8') as f:
            f.write(full_book)
        return full_book, book_filename
    except Exception as e:
        st.error(f"Erreur lors de la sauvegarde du livre: {str(e)}")
        return full_book, None

def generate_chapter_with_ai(api_key, template_name, chapter_name, memories):
    """G√©n√©rer un chapitre √† partir des souvenirs avec l'API OpenAI"""
    if not api_key:
        return "Veuillez d'abord entrer votre cl√© API OpenAI", False
    
    if not memories:
        return "Aucun souvenir trouv√© pour ce chapitre", False
    
    try:
        # Concat√©ner tous les souvenirs
        all_memories = "\n\n---\n\n".join([memory['content'] for memory in memories])
        
        # D√©finir le prompt
        prompt = f"""
En tant qu'√©crivain biographe professionnel, tu vas r√©diger un chapitre intitul√© '{chapter_name}' pour le livre '{template_name}' bas√© sur les souvenirs suivants :

{all_memories}

Instructions :
1. √âcris un texte captivant et coh√©rent qui int√®gre les souvenirs de fa√ßon fluide
2. Organise le contenu de mani√®re chronologique ou th√©matique selon ce qui convient le mieux
3. Utilise un style litt√©raire √©l√©gant avec des descriptions sensorielles
4. Cr√©e des transitions naturelles entre les diff√©rents souvenirs
5. Commence par un titre de niveau 2 avec le nom du chapitre
6. Divise le texte en sections avec des sous-titres si n√©cessaire
7. Longueur recommand√©e : 800-1500 mots

Le texte doit avoir un ton personnel, comme si l'auteur des souvenirs le racontait lui-m√™me.
Utilise exclusivement les informations fournies dans les souvenirs, sans inventer de faits.
        """
        
        # Configurer l'API OpenAI
        openai.api_key = api_key
        
        # Appeler l'API
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Tu es un √©crivain biographe professionnel qui transforme des souvenirs en chapitres de livre."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=16000
        )
        
        # Extraire le texte g√©n√©r√©
        generated_content = response.choices[0].message.content
        
        # Nettoyage de la m√©moire explicite (ajout pour optimisation)
        del response
        gc.collect()
        
        # Sauvegarder le chapitre
        success, _, _ = save_chapter(template_name, chapter_name, generated_content)
        
        if success:
            return generated_content, True
        else:
            return "Erreur lors de la sauvegarde du chapitre g√©n√©r√©", False
            
    except Exception as e:
        error_msg = f"Erreur lors de la g√©n√©ration du chapitre: {str(e)}"
        print(error_msg)  # Garder le log d'erreur
        return error_msg, False

# Fonction simplifi√©e pour l'enregistrement audio
def simple_audio_recorder(chapter_name, text_key):
    """Cr√©ation d'un enregistreur audio simple qui ressemble √† celui de ChatGPT"""
    
    # G√©n√©rer des cl√©s uniques
    recording_key = f"recording_{normalize_name(chapter_name)}"
    api_key = st.session_state.get('api_key', '')
    
    # V√©rifier si on a une cl√© API
    if not api_key:
        st.warning("‚ö†Ô∏è Veuillez d'abord entrer votre cl√© API OpenAI dans les param√®tres.")
        return
    
    # Initialiser l'√©tat d'enregistrement s'il n'existe pas
    if recording_key not in st.session_state:
        st.session_state[recording_key] = {
            "is_recording": False,
            "audio_processor": None,
            "webrtc_ctx_key": f"webrtc_{uuid.uuid4()}"
        }
    
    # R√©cup√©rer l'√©tat
    state = st.session_state[recording_key]
    
    # Colonne pour le bouton micro et les contr√¥les
    col1, col2 = st.columns([1, 10])
    
    with col1:
        # Si on n'est pas en train d'enregistrer, montrer le bouton micro
        if not state["is_recording"] and not st.session_state.get(f"transcribing_{recording_key}", False):
            if st.button("üé§", key=f"mic_{recording_key}", help="Commencer l'enregistrement"):
                state["is_recording"] = True
                # Forcer la mise √† jour de l'interface
                st.rerun()
        
        # Si on est en train d'enregistrer, montrer le bouton pour arr√™ter
        elif state["is_recording"]:
            if st.button("‚úì", key=f"stop_{recording_key}", help="Arr√™ter et transcrire"):
                state["is_recording"] = False
                st.session_state[f"transcribing_{recording_key}"] = True
                # Forcer la mise √† jour de l'interface
                st.rerun()
        
        # Si on est en train de transcrire, montrer une animation de chargement
        elif st.session_state.get(f"transcribing_{recording_key}", False):
            st.spinner("...")
            # Ici on aurait normalement un spinner, mais on va utiliser un texte
            st.text("...")
            
            # Effectuer la transcription
            with st.spinner("Transcription en cours..."):
                try:
                    # Initialiser le client OpenAI avec la cl√© API
                    client = openai.OpenAI(api_key=api_key)
                    
                    # Cr√©er un objet fichier-en-m√©moire √† partir des bytes audio
                    audio_bio = io.BytesIO(st.session_state[f"audio_bytes_{recording_key}"])
                    # IMPORTANT: Donner un nom √† ce fichier virtuel, requis par OpenAI
                    audio_bio.name = "audio.wav" 
                    
                    # Appel √† l'API Whisper en passant l'objet BytesIO directement
                    transcription = client.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_bio, # Passer l'objet BytesIO
                        language="fr",
                        response_format="text"
                    )
                        
                    # Stocker la transcription dans l'√©tat de session
                    content_key = f"new_memory_content_{normalize_name(chapter_name)}"
                    st.session_state[content_key] = transcription

                    # Afficher l'interface texte et masquer l'interface audio
                    show_text_input_key = f"show_text_input_{normalize_name(chapter_name)}"
                    st.session_state[show_text_input_key] = True
                    st.session_state[f"show_audio_recorder_{recording_key}"] = False
                    st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                            
                    # D√©clencher le rafra√Æchissement pour afficher le texte dans le bon champ
                    st.rerun()
                                
                except Exception as e:
                    st.error(f"Erreur lors de la transcription : {str(e)}")
                    # Optionnel: on pourrait aussi stocker l'erreur via user_message
                    # st.session_state.user_message = {"type": "error", "text": f"Erreur transcription: {e}"}
                    # st.rerun()

                # --- SUPPRIMER TOUTE LA SECTION SUIVANTE --- 
                # (Affichage de la zone de texte sp√©cifique √† l'audio et son bouton)
                # transcribed_text = st.text_area(
                #     "Texte transcrit (√©ditable) :", 
                #     value=st.session_state.get(transcribed_text_key, ""),
                #     height=150,
                #     key=f"transcribed_display_{normalize_name(chapter_name)}"
                # )

                # if st.button("", key=f"save_audio_{normalize_name(chapter_name)}"):
                #     if transcribed_text.strip():
                #         try:
                #             # Lire le texte potentiellement √©dit√©
                #             edited_text = st.session_state[f"transcribed_display_{normalize_name(chapter_name)}"]
                #             save_memory(st.session_state.selected_template_name, chapter_name, edited_text)
                #             st.success(f"Souvenir (issu de l'audio) sauvegard√© pour le chapitre '{chapter_name}' !")
                #             # R√©initialiser et cacher
                #             st.session_state[f"show_audio_recorder_{recording_key}"] = False
                #             st.session_state[transcribed_text_key] = ""
                #             st.rerun()
                #         except Exception as e:
                #              st.error(f"Erreur sauvegarde audio: {e}")
                #     else:
                #         st.warning("Le champ transcrit est vide.")

            # Affichage des souvenirs existants pour le chapitre
            # memories = load_memories(chapter_name)
            # if memories:
            #     for i, memory in enumerate(memories):
            #         # Ne PAS utiliser d'expander ici pour √©viter l'imbrication
            #         st.markdown(f"- **{memory['filename']}**") # Afficher le nom du fichier
            #         # Afficher le contenu directement en dessous
            #         st.text_area(
            #             f"Contenu_{memory['filename']}", 
            #             value=memory['content'], 
            #             height=100, 
            #             disabled=True, # Rendre non √©ditable ici
            #             label_visibility="collapsed" # Cacher le label par d√©faut
            #         ) 
            #         # Ajouter un petit s√©parateur
            #         st.divider()
            # else:
            #     st.caption("Aucun souvenir enregistr√© pour ce chapitre.")
            
            st.markdown("--- ")
            
            # --- Ajout d'un nouveau souvenir --- 
            st.markdown("**Ajouter un nouveau souvenir :**")
            add_text_key = f"add_text_{normalize_name(chapter_name)}"
            add_audio_key = f"add_audio_{normalize_name(chapter_name)}"
            show_text_input_key = f"show_text_input_{normalize_name(chapter_name)}"
            new_memory_text_key = f"new_memory_text_{normalize_name(chapter_name)}"
            show_audio_recorder_key = f"show_audio_recorder_{recording_key}"
            transcribed_text_key = f"transcribed_text_{normalize_name(chapter_name)}"

            # Initialiser les √©tats si n√©cessaire
            if show_text_input_key not in st.session_state:
                st.session_state[show_text_input_key] = False
            if show_audio_recorder_key not in st.session_state:
                st.session_state[show_audio_recorder_key] = False
            if transcribed_text_key not in st.session_state:
                st.session_state[transcribed_text_key] = ""

            # Boutons pour choisir le mode d'ajout
            col1, col2, _ = st.columns([1,1,3])
            with col1:
                if st.button("üí¨ Ajouter via Texte", key=add_text_key):
                    st.session_state[show_text_input_key] = True
                    st.session_state[show_audio_recorder_key] = False # Assurer l'exclusivit√©
                    st.rerun()
            with col2:
                 if st.button("üéôÔ∏è Ajouter via Audio", key=add_audio_key):
                    st.session_state[show_audio_recorder_key] = True
                    st.session_state[show_text_input_key] = False # Assurer l'exclusivit√©
                    st.rerun()

            # --- Interface d'ajout Texte ---
            if st.session_state.get(show_text_input_key, False):
                st.markdown("#### Nouveau Souvenir Texte")
                widget_key = f"new_memory_text_widget_{normalize_name(chapter_name)}"
                content_key = f"new_memory_content_{normalize_name(chapter_name)}"

                if content_key not in st.session_state:
                    st.session_state[content_key] = ""

                st.text_area(
                    "Racontez votre souvenir ici :",
                    height=150,
                    value=st.session_state[content_key], 
                    key=widget_key, 
                    on_change=update_text_content, 
                    args=(widget_key, content_key) 
                )

                save_col, cancel_col = st.columns(2)
                with save_col:
                    if st.button("üíæ Enregistrer ce Souvenir", key=f"save_new_text_{normalize_name(chapter_name)}"):
                        current_content = st.session_state.get(content_key, "").strip()
                        if current_content:
                            try:
                                save_memory(st.session_state.selected_template_name, chapter_name, current_content)
                                # Stocker le message de succ√®s dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter_name)
                                st.session_state.chapter_messages[chapter_key] = {"type": "success", "text": f"Souvenir texte enregistr√© pour le chapitre '{chapter_name}' !"}
                                st.session_state[content_key] = ""
                                st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                                st.rerun()
                            except Exception as e:
                                # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter_name)
                                st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"Erreur lors de l'enregistrement du souvenir texte : {e}"}
                                st.rerun()
                        else:
                            # Stocker le message d'avertissement dans le dictionnaire des messages par chapitre
                            chapter_key = normalize_name(chapter_name)
                            st.session_state.chapter_messages[chapter_key] = {"type": "warning", "text": "Le champ souvenir est vide."}
                            st.rerun()

                with cancel_col:
                    if st.button("Annuler", key=f"cancel_text_{normalize_name(chapter_name)}"):
                        st.session_state[show_text_input_key] = False
                        st.session_state[content_key] = ""
                        st.rerun()

            # --- Interface d'ajout Audio --- 
            if st.session_state.get(show_audio_recorder_key, False):
                st.markdown("#### Nouveau Souvenir Audio")
                st.info("Cliquez sur l'ic√¥ne micro pour enregistrer, puis validez l'enregistrement.")

                # Utiliser le composant audio_input comme dans le tutoriel
                audio_data = st.audio_input(
                    label="Enregistrez votre souvenir ici :", 
                    key=f"audio_input_{normalize_name(chapter_name)}"
                )
                
                # Si l'audio a √©t√© enregistr√© OU upload√© (audio_data contient des donn√©es)
                if audio_data:
                    audio_bytes = audio_data.read() # Lire les bytes depuis l'objet retourn√©
                    
                    # Afficher le lecteur audio pour r√©√©couter (facultatif mais utile)
                    st.audio(audio_bytes, format="audio/wav") # Assumer WAV pour l'instant
                    
                    # Pr√©paration pour la transcription (m√©thode directe)
                    with st.spinner("Transcription en cours..."):
                        try:
                            # Initialiser le client OpenAI avec la cl√© API
                            client = openai.OpenAI(api_key=api_key)
                            
                            # Cr√©er un objet fichier-en-m√©moire √† partir des bytes audio
                            audio_bio = io.BytesIO(audio_bytes)
                            # IMPORTANT: Donner un nom √† ce fichier virtuel, requis par OpenAI
                            audio_bio.name = "audio.wav" 
                            
                            # Appel √† l'API Whisper en passant l'objet BytesIO directement
                            transcription = client.audio.transcriptions.create(
                                model="whisper-1",
                                file=audio_bio, # Passer l'objet BytesIO
                                language="fr",
                                response_format="text"
                            )
                                
                            # Stocker la transcription dans l'√©tat de session
                            content_key = f"new_memory_content_{normalize_name(chapter_name)}"
                            st.session_state[content_key] = transcription

                            # Afficher l'interface texte et masquer l'interface audio
                            show_text_input_key = f"show_text_input_{normalize_name(chapter_name)}"
                            st.session_state[show_text_input_key] = True
                            st.session_state[show_audio_recorder_key] = False
                            st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                            
                            # D√©clencher le rafra√Æchissement pour afficher le texte dans le bon champ
                            st.rerun()
                                
                        except Exception as e:
                            st.error(f"Erreur lors de la transcription : {str(e)}")
                            # Optionnel: on pourrait aussi stocker l'erreur via user_message
                            # st.session_state.user_message = {"type": "error", "text": f"Erreur transcription: {e}"}
                            # st.rerun()

                # --- SUPPRIMER TOUTE LA SECTION SUIVANTE --- 
                # (Affichage de la zone de texte sp√©cifique √† l'audio et son bouton)
                # transcribed_text = st.text_area(
                #     "Texte transcrit (√©ditable) :", 
                #     value=st.session_state.get(transcribed_text_key, ""),
                #     height=150,
                #     key=f"transcribed_display_{normalize_name(chapter_name)}"
                # )

                # if st.button("", key=f"save_audio_{normalize_name(chapter_name)}"):
                #     if transcribed_text.strip():
                #         try:
                #             # Lire le texte potentiellement √©dit√©
                #             edited_text = st.session_state[f"transcribed_display_{normalize_name(chapter_name)}"]
                #             save_memory(st.session_state.selected_template_name, chapter_name, edited_text)
                #             st.success(f"Souvenir (issu de l'audio) sauvegard√© pour le chapitre '{chapter_name}' !")
                #             # R√©initialiser et cacher
                #             st.session_state[show_audio_recorder_key] = False
                #             st.session_state[transcribed_text_key] = ""
                #             st.rerun()
                #         except Exception as e:
                #              st.error(f"Erreur sauvegarde audio: {e}")
                #     else:
                #         st.warning("Le champ transcrit est vide.")

            # Suppression de l'ancienne section 'souvenir rapide'
            # temp_memory_text = st.text_area("√âcrire un souvenir rapide :", key=f"temp_text_{normalize_name(chapter_name)}")
            # if st.button(f" Sauvegarder souvenir rapide pour '{chapter_name}'", key=f"save_temp_{normalize_name(chapter_name)}"):
            #     if temp_memory_text.strip():
            #         # Utilisation de la fonction save_memory mise √† jour
            #         success, message, file_path = save_memory(st.session_state.selected_template_name, chapter_name, temp_memory_text)
            #         if success:
            #             st.success(message)
            #             # Effacer le champ apr√®s sauvegarde et rafra√Æchir
            #             st.session_state[f"temp_text_{normalize_name(chapter_name)}"] = ""
            #             st.rerun()
            #         else:
            #             st.error(f"Erreur sauvegarde : {message}")
            #     else:
            #         st.warning("Le champ souvenir est vide.")
            
            st.markdown("--- ")
            
            # --- G√©n√©ration du chapitre --- 
            st.markdown("**G√©n√©rer le chapitre :**")
            chapter_filename = normalize_name(chapter_name) + ".md"
            chapter_path = os.path.join(os.getcwd(), "chapitres", normalize_name(st.session_state.selected_template_name), chapter_filename)
            
            # Charger le chapitre g√©n√©r√© s'il existe d√©j√†
            generated_content = None
            if os.path.exists(chapter_path):
                try:
                    with open(chapter_path, 'r', encoding='utf-8') as f:
                        generated_content = f.read()
                except Exception as e:
                    st.warning(f"Impossible de lire le chapitre g√©n√©r√©: {e}")

            # Bouton pour g√©n√©rer
            if st.button(f"‚ú® G√©n√©rer le chapitre '{chapter_name}'", key=f"generate_{normalize_name(chapter_name)}", disabled=not memories):
                if memories:
                    with st.spinner("üß† L'IA r√©fl√©chit et r√©dige..."): 
                        # Appel r√©el √† la fonction de g√©n√©ration
                        generated_text, success = generate_chapter_with_ai(
                            st.session_state.api_key, 
                            st.session_state.selected_template_name, 
                            chapter_name, 
                            memories
                        )
                        
                        # V√©rifier si la g√©n√©ration a r√©ussi
                        if success and generated_text:
                            # Sauvegarder le chapitre g√©n√©r√©
                            save_success, save_message, save_path = save_chapter(
                                st.session_state.selected_template_name, 
                                chapter_name, 
                                generated_text
                            )
                            
                            if save_success:
                                # Mettre √† jour l'√©tat de session pour affichage imm√©diat
                                st.session_state.generated_chapters[normalize_name(chapter_name)] = generated_text
                                # Stocker le message de succ√®s dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter_name)
                                st.session_state.chapter_messages[chapter_key] = {"type": "success", "text": f"Chapitre '{chapter_name}' g√©n√©r√© et sauvegard√© ! {save_message}"}
                                st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                                st.rerun() # Recharger pour afficher
                            else:
                                # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter_name)
                                st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"Erreur lors de la sauvegarde du chapitre g√©n√©r√©: {save_message}"}
                                st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                                st.rerun() # Recharger pour afficher l'erreur
                        else:
                            # Afficher l'erreur retourn√©e par la fonction de g√©n√©ration
                            # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                            chapter_key = normalize_name(chapter_name)
                            st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"La g√©n√©ration du chapitre a √©chou√© : {generated_text}"}
                            st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"
                            st.rerun() # Recharger pour afficher l'erreur
                else:
                     st.warning("‚ö†Ô∏è Ajoutez au moins un souvenir avant de g√©n√©rer.")
                     st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"

            elif not memories:
                # Si aucun souvenir, on ne fait rien mais on reste sur le m√™me expander
                st.caption("‚ö†Ô∏è Ajoutez des souvenirs pour pouvoir g√©n√©rer ce chapitre.") # Remettre le caption
                st.session_state.active_expander = f"expander_{normalize_name(chapter_name)}"

            # Afficher le chapitre g√©n√©r√© (s'il existe dans l'√©tat de session ou fichier)
            display_content = st.session_state.generated_chapters.get(normalize_name(chapter_name), generated_content)
            if display_content:
                st.markdown("**Texte g√©n√©r√© :**")
                st.markdown(display_content)
            

# --- Export (√† placer en dehors de la boucle des chapitres) ---
st.sidebar.markdown("---")
st.sidebar.header("Exporter votre livre")

if st.session_state.selected_template_name and st.session_state.generated_chapters:
    ordered_chapters = st.session_state.chapters.copy()  # Pour respecter l'ordre des chapitres
    
    if st.sidebar.button("üìö Compiler en un seul document"):
        with st.spinner("Compilation en cours..."):
            compiled_text, book_filename = compile_book(st.session_state.selected_template_name, ordered_chapters)
            st.session_state.user_message = {"type": "success", "text": "Livre compil√© avec succ√®s !"}
            st.download_button(
                label="üì• T√©l√©charger le livre complet",
                data=compiled_text,
                file_name=book_filename,
                mime="text/markdown"
            )
            st.rerun()

# --- Interface Utilisateur Streamlit ---
st.title("MemorIA üìù")
st.markdown("Racontez vos souvenirs, l'IA r√©dige votre histoire.")

# --- Barre lat√©rale ---
with st.sidebar:
    st.title("Configuration")
    st.markdown("Param√©trez votre exp√©rience MemorIA.")
    
    # Saisie de la cl√© API OpenAI
    api_key = st.text_input(
        "Cl√© API OpenAI",
        type="password",
        value=st.session_state.get("api_key", ""),
        help="Votre cl√© API est n√©cessaire pour les fonctions IA. Elle reste locale."
    )
    
    # Mettre √† jour la cl√© API dans l'√©tat de session
    if api_key:
        st.session_state.api_key = api_key
        st.success("Cl√© API enregistr√©e.", icon="üîë")
    elif "api_key" in st.session_state and not api_key: # Si l'utilisateur efface la cl√©
        del st.session_state.api_key
        st.info("Cl√© API retir√©e.")
        st.rerun() # Recharger si la cl√© est enlev√©e pour d√©sactiver les fonctions IA

    # Choix du mod√®le de livre (uniquement si la cl√© API est fournie)
    if st.session_state.get("api_key"):
        templates = load_templates()
        if templates:
            template_options = list(templates.keys())
            
            selected_template_index = 0
            if st.session_state.get("selected_template_name") in template_options:
                selected_template_index = template_options.index(st.session_state.selected_template_name)
                
            selected_template = st.selectbox(
                "Mod√®le de livre :",
                template_options,
                index=selected_template_index,
                key="template_selector_sidebar"
            )
            
            # Si le mod√®le s√©lectionn√© change
            if selected_template and selected_template != st.session_state.get("selected_template_name"):
                st.session_state.selected_template_name = selected_template
                st.session_state.chapters = templates[selected_template].get('chapitres', templates[selected_template].get('chapters', []))
                st.session_state.generated_chapters = {} # R√©initialiser si on change de mod√®le
                st.rerun()
        else:
            st.error("Aucun mod√®le trouv√© !")
    else:
        st.warning("‚ö†Ô∏è Veuillez entrer votre cl√© API OpenAI pour choisir un mod√®le.")

    st.markdown("---")
    st.title("√Ä propos")
    st.markdown("MemorIA transforme vos souvenirs bruts en chapitres de vie r√©dig√©s par l'IA.")

# --- V√©rification initiale --- 
if not st.session_state.get("api_key"):
    st.warning("‚ö†Ô∏è Veuillez entrer votre cl√© API OpenAI dans la barre lat√©rale pour commencer.")
    st.stop() # Arr√™ter l'ex√©cution si pas de cl√© API

if not st.session_state.get("selected_template_name"):
    st.info("Veuillez choisir un mod√®le de livre dans la barre lat√©rale.")
    st.stop() # Arr√™ter l'ex√©cution si pas de mod√®le choisi

# --- Affichage des chapitres (Zone Principale) ---
st.header(f"Livre : {st.session_state.selected_template_name}")

if st.session_state.chapters:
    st.subheader("Vos Chapitres")
    
    # Affichage des chapitres avec expanders
    for chapter in st.session_state.chapters:
        # Cl√© unique pour l'expander bas√©e sur le chapitre normalis√©
        expander_key = f"expander_{normalize_name(chapter)}"
        chapter_key = normalize_name(chapter)
        
        with st.expander(f"Chapitre : {chapter}", expanded=(expander_key == st.session_state.get('active_expander'))):
            st.markdown(f"### G√©rer le chapitre : {chapter}")
            
            # Afficher les messages sp√©cifiques √† ce chapitre, s'il y en a
            if chapter_key in st.session_state.chapter_messages:
                msg = st.session_state.chapter_messages[chapter_key]
                if msg["type"] == "success":
                    st.success(msg["text"])
                elif msg["type"] == "error":
                    st.error(msg["text"])
                elif msg["type"] == "warning":
                    st.warning(msg["text"])
                elif msg["type"] == "info":
                    st.info(msg["text"])
                # Effacer le message apr√®s l'avoir affich√©
                del st.session_state.chapter_messages[chapter_key]
            
            # --- Affichage des souvenirs existants ---
            st.markdown("**Souvenirs enregistr√©s :**")
            memories = load_memories(chapter)
            if memories:
                for i, memory in enumerate(memories):
                    # Ne PAS utiliser d'expander ici pour √©viter l'imbrication
                    st.markdown(f"- **{memory['filename']}**") # Afficher le nom du fichier
                    # Afficher le contenu directement en dessous
                    st.text_area(
                        f"Contenu_{memory['filename']}", 
                        value=memory['content'], 
                        height=100, 
                        disabled=True, # Rendre non √©ditable ici
                        label_visibility="collapsed" # Cacher le label par d√©faut
                    ) 
                    # Ajouter un petit s√©parateur
                    st.divider()
            else:
                st.caption("Aucun souvenir enregistr√© pour ce chapitre.")
            
            st.markdown("--- ")
            
            # --- Ajout d'un nouveau souvenir --- 
            st.markdown("**Ajouter un nouveau souvenir :**")
            add_text_key = f"add_text_{normalize_name(chapter)}"
            add_audio_key = f"add_audio_{normalize_name(chapter)}"
            show_text_input_key = f"show_text_input_{normalize_name(chapter)}"
            new_memory_text_key = f"new_memory_text_{normalize_name(chapter)}"
            show_audio_recorder_key = f"show_audio_recorder_{expander_key}"
            transcribed_text_key = f"transcribed_text_{normalize_name(chapter)}"

            # Initialiser les √©tats si n√©cessaire
            if show_text_input_key not in st.session_state:
                st.session_state[show_text_input_key] = False
            if show_audio_recorder_key not in st.session_state:
                st.session_state[show_audio_recorder_key] = False
            if transcribed_text_key not in st.session_state:
                st.session_state[transcribed_text_key] = ""

            # Boutons pour choisir le mode d'ajout
            col1, col2, _ = st.columns([1,1,3])
            with col1:
                if st.button("üí¨ Ajouter via Texte", key=add_text_key):
                    st.session_state[show_text_input_key] = True
                    st.session_state[show_audio_recorder_key] = False # Assurer l'exclusivit√©
                    st.rerun()
            with col2:
                 if st.button("üéôÔ∏è Ajouter via Audio", key=add_audio_key):
                    st.session_state[show_audio_recorder_key] = True
                    st.session_state[show_text_input_key] = False # Assurer l'exclusivit√©
                    st.rerun()

            # --- Interface d'ajout Texte ---
            if st.session_state.get(show_text_input_key, False):
                st.markdown("#### Nouveau Souvenir Texte")
                widget_key = f"new_memory_text_widget_{normalize_name(chapter)}"
                content_key = f"new_memory_content_{normalize_name(chapter)}"

                if content_key not in st.session_state:
                    st.session_state[content_key] = ""

                st.text_area(
                    "Racontez votre souvenir ici :",
                    height=150,
                    value=st.session_state[content_key], 
                    key=widget_key, 
                    on_change=update_text_content, 
                    args=(widget_key, content_key) 
                )

                save_col, cancel_col = st.columns(2)
                with save_col:
                    if st.button("üíæ Enregistrer ce Souvenir", key=f"save_new_text_{normalize_name(chapter)}"):
                        current_content = st.session_state.get(content_key, "").strip()
                        if current_content:
                            try:
                                save_memory(st.session_state.selected_template_name, chapter, current_content)
                                # Stocker le message de succ√®s dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter)
                                st.session_state.chapter_messages[chapter_key] = {"type": "success", "text": f"Souvenir texte enregistr√© pour le chapitre '{chapter}' !"}
                                st.session_state[content_key] = ""
                                st.session_state.active_expander = expander_key
                                st.rerun()
                            except Exception as e:
                                # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter)
                                st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"Erreur lors de l'enregistrement du souvenir texte : {e}"}
                                st.rerun()
                        else:
                            # Stocker le message d'avertissement dans le dictionnaire des messages par chapitre
                            chapter_key = normalize_name(chapter)
                            st.session_state.chapter_messages[chapter_key] = {"type": "warning", "text": "Le champ souvenir est vide."}
                            st.rerun()

                with cancel_col:
                    if st.button("Annuler", key=f"cancel_text_{normalize_name(chapter)}"):
                        st.session_state[show_text_input_key] = False
                        st.session_state[content_key] = ""
                        st.rerun()

            # --- Interface d'ajout Audio --- 
            if st.session_state.get(show_audio_recorder_key, False):
                st.markdown("#### Nouveau Souvenir Audio")
                st.info("Cliquez sur l'ic√¥ne micro pour enregistrer, puis validez l'enregistrement.")

                # Utiliser le composant audio_input comme dans le tutoriel
                audio_data = st.audio_input(
                    label="Enregistrez votre souvenir ici :", 
                    key=f"audio_input_{normalize_name(chapter)}"
                )
                
                # Si l'audio a √©t√© enregistr√© OU upload√© (audio_data contient des donn√©es)
                if audio_data:
                    audio_bytes = audio_data.read() # Lire les bytes depuis l'objet retourn√©
                    
                    # Afficher le lecteur audio pour r√©√©couter (facultatif mais utile)
                    st.audio(audio_bytes, format="audio/wav") # Assumer WAV pour l'instant
                    
                    # Pr√©paration pour la transcription (m√©thode directe)
                    with st.spinner("Transcription en cours..."):
                        try:
                            # Initialiser le client OpenAI avec la cl√© API
                            client = openai.OpenAI(api_key=api_key)
                            
                            # Cr√©er un objet fichier-en-m√©moire √† partir des bytes audio
                            audio_bio = io.BytesIO(audio_bytes)
                            # IMPORTANT: Donner un nom √† ce fichier virtuel, requis par OpenAI
                            audio_bio.name = "audio.wav" 
                            
                            # Appel √† l'API Whisper en passant l'objet BytesIO directement
                            transcription = client.audio.transcriptions.create(
                                model="whisper-1",
                                file=audio_bio, # Passer l'objet BytesIO
                                language="fr",
                                response_format="text"
                            )
                                
                            # Stocker la transcription dans l'√©tat de session
                            content_key = f"new_memory_content_{normalize_name(chapter)}"
                            st.session_state[content_key] = transcription

                            # Afficher l'interface texte et masquer l'interface audio
                            show_text_input_key = f"show_text_input_{normalize_name(chapter)}"
                            st.session_state[show_text_input_key] = True
                            st.session_state[show_audio_recorder_key] = False
                            st.session_state.active_expander = expander_key
                            
                            # D√©clencher le rafra√Æchissement pour afficher le texte dans le bon champ
                            st.rerun()
                                
                        except Exception as e:
                            st.error(f"Erreur lors de la transcription : {str(e)}")
                            # Optionnel: on pourrait aussi stocker l'erreur via user_message
                            # st.session_state.user_message = {"type": "error", "text": f"Erreur transcription: {e}"}
                            # st.rerun()

                # --- SUPPRIMER TOUTE LA SECTION SUIVANTE --- 
                # (Affichage de la zone de texte sp√©cifique √† l'audio et son bouton)
                # transcribed_text = st.text_area(
                #     "Texte transcrit (√©ditable) :", 
                #     value=st.session_state.get(transcribed_text_key, ""),
                #     height=150,
                #     key=f"transcribed_display_{normalize_name(chapter)}"
                # )

                # if st.button("", key=f"save_audio_{normalize_name(chapter)}"):
                #     if transcribed_text.strip():
                #         try:
                #             # Lire le texte potentiellement √©dit√©
                #             edited_text = st.session_state[f"transcribed_display_{normalize_name(chapter)}"]
                #             save_memory(st.session_state.selected_template_name, chapter, edited_text)
                #             st.success(f"Souvenir (issu de l'audio) sauvegard√© pour le chapitre '{chapter}' !")
                #             # R√©initialiser et cacher
                #             st.session_state[show_audio_recorder_key] = False
                #             st.session_state[transcribed_text_key] = ""
                #             st.rerun()
                #         except Exception as e:
                #              st.error(f"Erreur sauvegarde audio: {e}")
                #     else:
                #         st.warning("Le champ transcrit est vide.")

            # Suppression de l'ancienne section 'souvenir rapide'
            # temp_memory_text = st.text_area("√âcrire un souvenir rapide :", key=f"temp_text_{normalize_name(chapter)}")
            # if st.button(f" Sauvegarder souvenir rapide pour '{chapter}'", key=f"save_temp_{normalize_name(chapter)}"):
            #     if temp_memory_text.strip():
            #         # Utilisation de la fonction save_memory mise √† jour
            #         success, message, file_path = save_memory(st.session_state.selected_template_name, chapter, temp_memory_text)
            #         if success:
            #             st.success(message)
            #             # Effacer le champ apr√®s sauvegarde et rafra√Æchir
            #             st.session_state[f"temp_text_{normalize_name(chapter)}"] = ""
            #             st.rerun()
            #         else:
            #             st.error(f"Erreur sauvegarde : {message}")
            #     else:
            #         st.warning("Le champ souvenir est vide.")
            
            st.markdown("--- ")
            
            # --- G√©n√©ration du chapitre --- 
            st.markdown("**G√©n√©rer le chapitre :**")
            chapter_filename = normalize_name(chapter) + ".md"
            chapter_path = os.path.join(os.getcwd(), "chapitres", normalize_name(st.session_state.selected_template_name), chapter_filename)
            
            # Charger le chapitre g√©n√©r√© s'il existe d√©j√†
            generated_content = None
            if os.path.exists(chapter_path):
                try:
                    with open(chapter_path, 'r', encoding='utf-8') as f:
                        generated_content = f.read()
                except Exception as e:
                    st.warning(f"Impossible de lire le chapitre g√©n√©r√©: {e}")

            # Bouton pour g√©n√©rer
            if st.button(f"‚ú® G√©n√©rer le chapitre '{chapter}'", key=f"generate_{normalize_name(chapter)}", disabled=not memories):
                if memories:
                    with st.spinner("üß† L'IA r√©fl√©chit et r√©dige..."): 
                        # Appel r√©el √† la fonction de g√©n√©ration
                        generated_text, success = generate_chapter_with_ai(
                            st.session_state.api_key, 
                            st.session_state.selected_template_name, 
                            chapter, 
                            memories
                        )
                        
                        # V√©rifier si la g√©n√©ration a r√©ussi
                        if success and generated_text:
                            # Sauvegarder le chapitre g√©n√©r√©
                            save_success, save_message, save_path = save_chapter(
                                st.session_state.selected_template_name, 
                                chapter, 
                                generated_text
                            )
                            
                            if save_success:
                                # Mettre √† jour l'√©tat de session pour affichage imm√©diat
                                st.session_state.generated_chapters[normalize_name(chapter)] = generated_text
                                # Stocker le message de succ√®s dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter)
                                st.session_state.chapter_messages[chapter_key] = {"type": "success", "text": f"Chapitre '{chapter}' g√©n√©r√© et sauvegard√© ! {save_message}"}
                                st.session_state.active_expander = expander_key
                                st.rerun() # Recharger pour afficher
                            else:
                                # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                                chapter_key = normalize_name(chapter)
                                st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"Erreur lors de la sauvegarde du chapitre g√©n√©r√©: {save_message}"}
                                st.session_state.active_expander = expander_key
                                st.rerun() # Recharger pour afficher l'erreur
                        else:
                            # Afficher l'erreur retourn√©e par la fonction de g√©n√©ration
                            # Stocker le message d'erreur dans le dictionnaire des messages par chapitre
                            chapter_key = normalize_name(chapter)
                            st.session_state.chapter_messages[chapter_key] = {"type": "error", "text": f"La g√©n√©ration du chapitre a √©chou√© : {generated_text}"}
                            st.session_state.active_expander = expander_key
                            st.rerun() # Recharger pour afficher l'erreur
                else:
                     st.warning("‚ö†Ô∏è Ajoutez au moins un souvenir avant de g√©n√©rer.")
                     st.session_state.active_expander = expander_key

            elif not memories:
                # Si aucun souvenir, on ne fait rien mais on reste sur le m√™me expander
                st.caption("‚ö†Ô∏è Ajoutez des souvenirs pour pouvoir g√©n√©rer ce chapitre.") # Remettre le caption
                st.session_state.active_expander = expander_key

            # Afficher le chapitre g√©n√©r√© (s'il existe dans l'√©tat de session ou fichier)
            display_content = st.session_state.generated_chapters.get(normalize_name(chapter), generated_content)
            if display_content:
                st.markdown("**Texte g√©n√©r√© :**")
                st.markdown(display_content)
            
    # Suppression du bloc else probl√©matique
    # else:
    #     st.warning("Ce mod√®le de livre ne contient aucun chapitre.")

# --- Nettoyage/Footer ---
# (Peut contenir des infos de version, liens, etc.)
